// init (cmd control alt t)

#import 'inventory.js'
#import 'sandbox.js'

var definedTextStyles = [];
var uniqueTextStyles = [];


function analyseTextStyles ()Â {
	var styles = [[[doc documentData] layerTextStyles] objects]

	for (var i = 0; i < styles.count(); i++) {
		var style = styles.objectAtIndex(i);
		var textStyle = style.style().textStyle().attributes();
		if (!inventory.common.isIncluded(definedTextStyles, textStyle)) {
	    	definedTextStyles.push({
	    		"textStyle": textStyle,
	    		"name": style.name()
	    	});
	    }
	}
	// sort by font size
	definedTextStyles.sort(compareTextStyleFontSize);
}

function analyseTextLayers() {

	// Loop through pages

	for (var i = 0; i < doc.pages().count(); i++) {
		var page = doc.pages().objectAtIndex(i),
		layers = page.children();

		if (page.name != inventory.config.name) {
	    	// Loop through all children of the page

	    	for (var j = 0; j < layers.count(); j++) {

	    		// get the current layer

	    		var layer = layers.objectAtIndex(j);

	    		// Check if the layer is a text layer

	    		if([layer isKindOfClass:MSTextLayer]) {

	    			var textStyle = layer.style().textStyle().attributes();
	    			if (!inventory.common.isIncluded(uniqueTextStyles, textStyle)) {
	    				uniqueTextStyles.push(textStyle);
	    			}
	    		}
	    	}
	    }
	}

	// sort by font size
	uniqueTextStyles.sort(compareFontSize);
	[doc showMessage: uniqueTextStyles.length + " unique text styles found. " + definedTextStyles.length + " defined layer text styles found."]
}

function compareFontSize(a, b) {
	if (a.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute) < b.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute))
		return -1;
	if (a.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute) > b.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute))
		return 1;
	return 0;
}

function compareTextStyleFontSize(a, b) {
	if (a.textStyle.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute) < b.textStyle.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute))
		return -1;
	if (a.textStyle.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute) > b.textStyle.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute))
		return 1;
	return 0;
}

function addCheckeredBackground(artboard) {
	var layer = artboard.addLayerOfType("rectangle");
	layer.frame().setWidth(artboard.frame().width())
	layer.frame().setHeight(artboard.frame().height())
	layer.style().fills().addNewStylePart();
	layer.style().fill().setFillType(4);
	layer.setName("Background");

	var image = [[NSImage alloc] initWithContentsOfFile:inventory.config.background_image];

	layer.style().fill().setPatternImage(image)
}


function layoutDefinedTextStyles(artboard) {

}

function createTextStyles (artboard) {
	var top = 0;
	var margin = 20;
	var maxWidth = 0;

	for (var i = 0; i < definedTextStyles.length; i++) {
		var definedTextStyle = definedTextStyles[i];
		var textLayer = artboard.addLayerOfType("text");
		textLayer.setStringValue(inventory.config.textStylePlaceholder)
		textLayer.style().textStyle().setAttributes(definedTextStyle.textStyle);
		textLayer.setName(definedTextStyle.name)
		var theWidth = textLayer.frame().width();

		if (theWidth > maxWidth) maxWidth = theWidth;
		textLayer.frame().setX(margin);
		textLayer.frame().setY(top);

		top += textLayer.frame().height() + margin;
	}

	for (var i = 0; i < uniqueTextStyles.length; i++) {
		var textLayer = artboard.addLayerOfType("text");
		textLayer.setStringValue(inventory.config.textStylePlaceholder)
		textLayer.setName("Unique Text Style " + i)
		textLayer.style().textStyle().setAttributes(uniqueTextStyles[i]);
		var theWidth = textLayer.frame().width();

		if (theWidth > maxWidth) maxWidth = theWidth;
		textLayer.frame().setX(margin);
		textLayer.frame().setY(top);

		top += textLayer.frame().height() + margin;
	}

	[textLayer select:true byExpandingSelection:false]
	// centerView(textLayer)

	// Resize artboard and background to match the newly created text layers
	var background = artboard.layers().objectAtIndex(0);
	artboard.frame().setWidth(maxWidth + margin);
	background.frame().setWidth(maxWidth + margin);
	artboard.frame().setHeight(top + margin);
	background.frame().setHeight(top + margin);
	background.setIsLocked(true);

	// Zoom the view to make the entire artboard visible
	inventory.view.zoomTo(artboard)

}

function exportStyles() {
	var styleSheetString = inventory.css.generateStyleSheet(doc.currentPage().currentArtboard().children());

	var view = [doc currentView];
	view.refresh();

	// Document path
	var document_path = [[doc fileURL] path].split([doc displayName])[0];

	var path = document_path + "/typography.css"

	// Write file will crash sketch
	// todo: use sandbox.js to securely write file
	inventory.common.save_file_from_string(path, styleSheetString);
}

analyseTextLayers();
analyseTextStyles();
// analyseColors();
log("did analyse")

// for large files, sketch crashes after adding the style sheet page (a second time)
var styleSheetPage = inventory.common.getPageByName(inventory.config.pageName);
log("got page")
var artboard = inventory.common.getArtboardByPageAndName(styleSheetPage, "Typography");
log("got artboard")
inventory.common.removeAllLayersFromArtboard(artboard)
log("removed layers")
addCheckeredBackground(artboard);
log("added background")
createTextStyles(artboard);
log("created styles")

// exportStyles();