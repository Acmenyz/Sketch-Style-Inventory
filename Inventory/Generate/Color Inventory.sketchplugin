// (control alt cmd c)

/**
 * This plugin generates an artboard containing color swatches
 * of all used fill and text colors of the document.
 *
 * Florian Schulz Copyright 2014, MIT License
 */

#import 'inventory.js'

// rgb color storage is needed for color sheet generation
var rgbColors = [];

// hex color storage is needed for duplication checks
var hexColors = [];

// page that the artboard will be created on
// var styleSheetPage = inventory.common.getPageByName(inventory.config.pageName);
var styleSheetPage = doc.currentPage();

// artboard that will hold all color swatches
var artboard = inventory.common.getArtboardByPageAndName(styleSheetPage, "Colors");

// loop through pages
var pages = doc.pages().objectEnumerator();
while (page = pages.nextObject()) {

  // search for the style sheet page
  if (page.name() != inventory.config.pageName) {

    // get layers
    var layers = page.children().objectEnumerator();

    // loop through all layers
    while (layer = layers.nextObject()) {

      // consider text and shapes
      if(layer.isKindOfClass(MSShapeGroup) ||Â layer.isKindOfClass(MSTextLayer)) {

        // the color of the layer
        var color = inventory.colors.getColorOf(layer);

        if (color != undefined) {

          // need to compare hex values for comparison in include function
          var hex_color = "#" + color.hexValue();

          // Check if the current color is a new one
          if(inventory.common.isIncluded(hexColors, hex_color) == 0) {
            hexColors.push(hex_color);
            rgbColors.push(color);
          }
        }
      }
    }
  }
}

// only create a color sheet when there are colors

if (rgbColors.length > 0) {
  inventory.colors.createColorSheet(artboard, rgbColors);
}

var rgbColors = null;
var hexColors = null;

// Position the artboard next to the last artboard

var rma = getRightmostArtboard();

// The actual position that we want is the right edge of the
// rightmost artboard plus a margin of 100px.

var left = rma.frame().width() + rma.frame().x() + 100;
artboard.frame().setX(left);

// focus the view on the artboard
inventory.view.centerTo(artboard);
inventory.view.zoomTo(artboard);

/**
 * Returns the x position of the leftmost artboard
 * @return {artboard} artboard
 */
function getRightmostArtboard() {
  var meta = [];

  // Loop through all artboards of the current page
  for (var i = 0; i < doc.currentPage().artboards().count(); i++) {

    // remember the artboard
    var artboard = doc.currentPage().artboards().objectAtIndex(i);

    // the left position of the artboard
    var left = artboard.frame().x();

    // save properties of the artboard
    meta.push({
      artboard: artboard,
      left: left
    });
  }
  // Sort the artboards by their left position
  meta.sort(sortLeft);

  // Return the leftmost artboard
  var artboard = meta[meta.length-1].artboard;
  return artboard;
}

/**
 * Used to sort the left positions of two given layers
 * @param  {layer} a
 * @param  {layer} b
 */
function sortLeft(a, b) {
    return a.left - b.left;
}