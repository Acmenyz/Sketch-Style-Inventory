// (control alt cmd c)

/**
 * This plugin generates an artboard containing color swatches
 * of all used fill and text colors of the current page.
 *
 * Florian Schulz Copyright 2014, MIT License
 */

#import 'inventory.js'

(function() {

    var artboards = null,
        colorArtboard = null,
        color = null,
        cname = null,
        hexColor = null,
        hexColors = [],
        layers = null,
        rgbColor = [],
        rma = null,
        styleSheetPage = null;


    // rgb color storage is needed for color sheet generation
    rgbColors = [];

    // hex color storage is needed for duplication checks
    hexColors = [];

    // page that the artboard will be created on
    // var styleSheetPage = com.getflourish.common.getPageByName(com.getflourish.config.pageName);
    styleSheetPage = doc.currentPage();

    // the right most artboard
    rma = getRightmostArtboard();

    // dirty hack that will prevent crashes
    // todo: find out why Sketch crashes when a existing artboard is selected
    com.getflourish.common.removeArtboardFromPage(styleSheetPage, com.getflourish.config.colorInventoryName);

    // artboard that will hold all color swatches
    colorArtboard = com.getflourish.common.getArtboardByPageAndName(styleSheetPage, com.getflourish.config.colorInventoryName);

    // get layers
    layers = doc.currentPage().children().objectEnumerator();

    // loop through all layers
    while (layer = layers.nextObject()) {
        try {
            // the color of the layer
            color = com.getflourish.colors.getColorOf(layer);
            log("got color: " + color);

            if (color != null) {
                // get classname
                cname = String(color.className());
                log(cname);

                if (cname === "MSColor") {
                    // need to compare hex values for comparison in include function

                    try {
                        hex_color = color.hexValue();
                    } catch (error)Â {
                        log("could not get hex color");
                    }

                    try {
                        if (hex_color) {
                            log(hex_color);
                            // Check if the current color is a new one
                            if(com.getflourish.common.isIncluded(hexColors, hex_color) == 0) {
                                hexColors.push(hex_color);
                                rgbColors.push(color);
                            }
                        }
                    } catch (error) {
                        log("could not check integration");
                    }
                }
            }
        } catch (error) {
            log("could not finish loop");
        }
    }


    // only create a color sheet when there are colors

    if (rgbColors.length > 0) {
      com.getflourish.colors.createColorSheet(colorArtboard, rgbColors);
    }

    // Position the artboard next to the last artboard
    // The actual position that we want is the right edge of the
    // rightmost artboard plus a margin of 100px.

    if(rma.name() != com.getflourish.config.colorInventoryName) {
        var left = rma.frame().width() + rma.frame().x() + 100;
        var top = rma.frame().y();
        colorArtboard.frame().setX(left);
        colorArtboard.frame().setY(top);
    } else {
        var left = rma.frame().x();
        var top = rma.frame().y();
        colorArtboard.frame().setX(left);
        colorArtboard.frame().setY(top);
    }

    bg = com.getflourish.common.addCheckeredBackground(colorArtboard);

    // focus the view on the artboard
    com.getflourish.view.centerTo(colorArtboard);
    doc.currentPage().deselectAllLayers();
    colorArtboard.setIsSelected(true);

    // refresh
    com.getflourish.common.refreshPage();

    // reset variable
    artboards = null;
    colorArtboard = null;
    hexColors = null;
    layers = null;
    rgbColor = null;
    styleSheetPage = null;

    /**
     * Returns the x position of the leftmost artboard
     * @return {artboard} artboard
     */
    function getRightmostArtboard() {
      var meta = [];

      // Loop through all artboards of the current page
      for (var i = 0; i < doc.currentPage().artboards().count(); i++) {

        // remember the artboard
        var artboard = doc.currentPage().artboards().objectAtIndex(i);

        // the left position of the artboard
        var left = artboard.frame().x();

        // save properties of the artboard
        meta.push({
          artboard: artboard,
          left: left
        });
      }
      // Sort the artboards by their left position
      meta.sort(sortLeft);

      // Return the rightmost artboard
      var artboard = meta[meta.length-1].artboard;
      return artboard;
    }

    /**
     * Used to sort the left positions of two given layers
     * @param  {layer} a
     * @param  {layer} b
     */
    function sortLeft(a, b) {
        return a.left - b.left;
    }
}());