var styles = [[[doc documentData] layerTextStyles] objects]

var css = "/* Text Styles from Sketch */";
css += '\n';
css += '\n';

for (var i = 0; i < styles.count(); i++) {

	var style = styles.objectAtIndex(i);
	var attrs = style.style().textStyle().attributes();

	print(style.name());
	print(attrs.NSFont.fontName());
	print(attrs.NSColor);
	print(attrs.NSParagraphStyle.lineSpacing());

	var selector = '.' + style.name().toLowerCase().replace(/ /gi, '-');

	css += selector + ' {';
	css += getDeclaration("font-family", attrs.NSFont.fontName());
	css += getDeclaration("font-size", attrs.NSFont.fontDescriptor().objectForKey(NSFontSizeAttribute));

	var color = attrs.NSColor;

	var hex_string = "#" + [color hexValue];


	css += getDeclaration("color", hex_string);
	css += '\n}';
	css += '\n';
}

function getDeclaration(property, value) {
	return '\n\t' + property + ": " + value + ";";
}

var someContent = NSString.stringWithString_(css)
print(css);
var pluginPath = sketch.scriptPath;
var lastSlash = pluginPath.lastIndexOf("/");
var basePath = pluginPath.substr(0, lastSlash);
var fileName = "styles.json";
var path = basePath + "/" + fileName;

print(path);

// Write file
someContent.dataUsingEncoding_(NSUTF8StringEncoding).writeToFile_atomically_(path, true)


