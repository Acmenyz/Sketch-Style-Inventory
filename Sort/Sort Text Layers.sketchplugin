// Sort selected layers by their text layer content (ctrl option command s)

var maxExamples = 3;
var numberOfTextLayersPerGroup = 0;
var sortableValues = [];
var sortIndex = 0;
var textLayersMeta = [];
var leftPositions = [];
var topPositions = [];


function sortLayers () {

	// Loop through all selected layers

	for (var i = 0; i < selection.count(); i++) {
		var layers = selection[i].children();
		var textLayers = [];
		var numTextLayers = 0;
		var strings = [];

		// Loop through all child layers of the group

		for (var j = 0; j < layers.count(); j++) {
			var layer = layers[j];

			// Proceed with text layers

			if (layer.className() == "MSTextLayer") {

				// Remember the string

				strings.push(layer.stringValue());
				numTextLayers++;

				// Remember the maximum number of text layers per group

				if (numTextLayers > numberOfTextLayersPerGroup) {
					numberOfTextLayersPerGroup = numTextLayers;

                    // Create example string for the drop down

					sortableString = layer.name();
                    sortableValues.push(sortableString);
				} else {
                    if (i < maxExamples) {
                        sortableValues[numTextLayers-1] += ", " + layer.name();
                    } else if(i == maxExamples) {
                        sortableValues[numTextLayers-1] += ", …";
                    }
                }
			}
		}

		// For each layer group, save the corresponding values of the text layers

		textLayersMeta.push({
			"name": layer.name(),
			"layer": selection[i],
			"strings": strings,
            "top": selection[i].frame().top()
		});

		// Remember the position of each layer

		topPositions.push(parseInt(selection[i].frame().y()));
		leftPositions.push(parseInt(selection[i].frame().x()));
	}

	// Sort positions

	topPositions.sort(sortNumber);
	leftPositions.sort(sortNumber);

	// Let the user select the text field that should be sorted on

	if (numberOfTextLayersPerGroup > 0) {

        // Show sort options

        var options = ["Ascending (A->Z)", "Descending (Z->A)", "Random", "By Top Position", "Layer Name"];
        var choice = createSelect('How do you want to sort?', options, 0)
        var index = choice[1];
        sortMode = index;

        switch (sortMode) {
            case 0:
                textLayersMeta.sort(asc);
                break;
            case 1:
                textLayersMeta.sort(desc);
                break;
            case 2:
                shuffle(textLayersMeta);
                break;
            case 3:
                textLayersMeta.sort(sortTop);
                break;
            case 4:
                textLayersMeta.sort(nameAsc);
                break;
            default:
                textLayersMeta.sort(asc);
                break;
        }

        if (numberOfTextLayersPerGroup > 1) {
            // Show text layer selection menu

            var choice = createSelect('What text layer do you want to sort on?', sortableValues, 0)
            var index = choice[1];
            sortIndex = index;
        }

	} else if (numberOfTextLayersPerGroup == 0) {

        // Limit the sort options if there are no text layers

        var options = ["By Top Position", "Layer Name"];
        var choice = createSelect('How do you want to sort?', options, 0)
        var index = choice[1];
        sortMode = index;

        switch (sortMode) {
            case 0:
                textLayersMeta.sort(sortTop);
                break;
            case 1:
                textLayersMeta.sort(nameAsc);
                break;
            default:
                textLayersMeta.sort(asc);
                break;
        }
    }

	// Finally, layout the sorted layers

	for (var i = 0; i < textLayersMeta.length; i++) {
		textLayersMeta[i].layer.frame().setY(topPositions[i]);
		textLayersMeta[i].layer.frame().setX(leftPositions[i]);
	}
}

// Run
if (selection.count() > 1) {
	sortLayers();
} else {
	[doc showMessage:"Please select at least two layers."]
}

doc.currentPage().deselectAllLayers();

// Re-order the layer stack to represent the new order
for (var i = 0; i < textLayersMeta.length; i++) {
	var layer = textLayersMeta[textLayersMeta.length - i - 1].layer;
	// Select the layer
	layer.setIsSelected(true);
    // Send it to the back
	sendBack();
	doc.currentPage().deselectAllLayers();
}

var numberOfTextLayersPerGroup = null;
var sortableValues = null;
var sortIndex = null;
var textLayersMeta = null;
var leftPositions = null;
var topPositions = null;


// Sorts text layer strings in a ascending order

function asc(a, b) {
	if (a.strings[sortIndex] < b.strings[sortIndex])
		return -1;
	if (a.strings[sortIndex] > b.strings[sortIndex])
		return 1;
	return 0;
}

// Sorts text layer strings in a descending order

function desc(a, b) {
	if (a.strings[sortIndex] > b.strings[sortIndex])
		return -1;
	if (a.strings[sortIndex] < b.strings[sortIndex])
		return 1;
	return 0;
}

// Sorts text layer strings in a ascending order

function nameAsc(a, b) {
    if (a.name[sortIndex] < b.name[sortIndex])
        return -1;
    if (a.name[sortIndex] > b.name[sortIndex])
        return 1;
    return 0;
}

// Sorts text layer strings in a descending order
function nameDesc(a, b) {
    if (a.name[sortIndex] > b.name[sortIndex])
        return -1;
    if (a.name[sortIndex] < b.name[sortIndex])
        return 1;
    return 0;
}

// Sorts numbers. By default, sort would handle numbers as strings and thus not sort them as intended.
function sortNumber(a,b) {
    return a - b;
}

// Sorts layers by their top position
function sortTop(a,b) {
    return a.top - b.top;
}

// Shuffle array
function shuffle(array) {
  var currentIndex = array.length, temporaryValue, randomIndex ;

  // While there remain elements to shuffle...
  while (0 !== currentIndex) {

    // Pick a remaining element...
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex -= 1;

    // And swap it with the current element.
    temporaryValue = array[currentIndex];
    array[currentIndex] = array[randomIndex];
    array[randomIndex] = temporaryValue;
  }

  return array;
}

// Creates a dialog with a drop down

function createSelect(msg, items, selectedItemIndex){
  selectedItemIndex = selectedItemIndex || 0

  var accessory = [[NSComboBox alloc] initWithFrame:NSMakeRect(0,0,200,25)]
  [accessory addItemsWithObjectValues:items]
  [accessory selectItemAtIndex:selectedItemIndex]

  var alert = [[NSAlert alloc] init]
  [alert setMessageText:msg]
  [alert addButtonWithTitle:'OK']
  [alert addButtonWithTitle:'Cancel']
  [alert setAccessoryView:accessory]

  var responseCode = [alert runModal]
  var sel = [accessory indexOfSelectedItem]

  return [responseCode, sel]
}

// Calls menu commands

function sendAction(commandToPerform) {
	try {
		[NSApp sendAction:commandToPerform to:nil from:doc]
	} catch(e) {
		my.log(e)
	}
};

function sendBackward() {
	sendAction('moveBackward:');
}
function sendForward() {
	sendAction('moveForward:');
}
function sendBack() {
	sendAction('moveToBack:');
}