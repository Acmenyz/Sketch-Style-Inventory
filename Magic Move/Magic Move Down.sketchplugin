// (control command ↓)

/**
 * Move selection to the next top edge of a layer that is on the same level as the selected layer
 *
 * Florian Schulz Copyright 2014, MIT License
 */

#import 'inventory.js'

var bottomPositions = [];
var topPositions = [];
var selected = selection[0];
var parent = selected.parentGroup();
var nextPosition = 0;


// store the bottom positions first
for (var i = 0; i < parent.layers().count(); i++) {

    // check if child layer is selected layer
    var child = parent.layers().array().objectAtIndex(i);

    if (!inventory.layers.areEqual(child, selected)) {
        var top = child.frame().y() - selected.frame().height();
        topPositions.push(top);

        // get bottom positions
        var bottom = child.frame().y() + child.frame().height();
        bottomPositions.push(bottom);
    }
}

// sort positions
topPositions.sort(sortNumber);
bottomPositions.sort(sortNumber);

// set max position
nextPosition = topPositions[topPositions.length - 1];
// if layer is already at the bottom
if (selected.frame().y() >= nextPosition) {
    // get the bottom position of the last layer
    //
    if (parent.className() == "MSArtboardGroup") {
        // if the parent layer is an artboard, set position to the artboard’s bottom edge
        nextPosition = doc.currentPage().currentArtboard().frame().height() - selected.frame().height();
    } else {
        nextPosition = bottomPositions[bottomPositions.length - 1];
    }

} else {
    // search for the nearest bottom position
    for (var j = 0; j < topPositions.length; j++) {
        if (topPositions[j] > selected.frame().y() && topPositions[j] < nextPosition) {
            nextPosition = topPositions[j];
            break;
        }
    }
}

// finally set the position
selected.frame().setY(nextPosition);

// sorts numbers. By default, sort would handle numbers as strings and thus not sort them as intended.
function sortNumber(a, b) {
    return a - b;
}